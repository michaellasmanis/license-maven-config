#
# Copyright Â© 2020 Michael Lasmanis (michael@lasmanis.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1

orbs:
  slack: circleci/slack@4.8.3

jobs:
  build:
    docker:
      # specify the version you desire here
      - image: cimg/openjdk:8.0

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

      # start with a safe build number
      MVN_CHANGELIST: 0-SNAPSHOT

    steps:
      - checkout

      - run:
          name: "Setup version information"
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
            echo "export MVN_CHANGELIST=${CIRCLE_BUILD_NUM}" >> $BASH_ENV
            else
            echo "export MVN_CHANGELIST=${CIRCLE_BUILD_NUM}-SNAPSHOT"  >> $BASH_ENV
            fi
            source $BASH_ENV
            echo "MVN_CHANGELIST = ${MVN_CHANGELIST}"

      - run:
          name: "Setup GPG"
          command: |
            mkdir ~/.gnupg
            chmod 700 ~/.gnupg
            echo "default-cache-ttl 46000" >> ~/.gnupg/gpg-agent.conf
            echo "pinentry-program /usr/bin/pinentry" >> ~/.gnupg/gpg-agent.conf
            echo "allow-preset-passphrase" >> ~/.gnupg/gpg-agent.conf
            echo "${GPG_SECRETKEYBASE64}" | base64 --decode | gpg --yes --batch --import
            /usr/lib/gnupg/gpg-preset-passphrase --preset --passphrase "${GPG_PASSPHRASE}" "${GPG_KEYGRIP}"


      - run:
          name: Setting up git
          command: |
            git config --global user.email "${GPG_EMAIL}"
            git config --global user.name "${GPG_NAME}"
            git config --global user.signingkey "${GPG_KEYID}"
            git config --global commit.gpgsign 'true'
            git config --global tag.forceSignAnnotated 'true'

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v2-maven-repo-{{ .Branch }}-{{ checksum "pom.xml" }}
          - v2-maven-repo-{{ .Branch }}
          - v2-maven-repo-

      - run:
          name: Fetching maven dependencies
          command: |
            mvn -s .circleci/maven.settings.xml -Dgpg.keyname=${GPG_EMAIL} -Dchangelist=${MVN_CHANGELIST} -DenableSigning=true dependency:go-offline

      - run:
          name: Maven Build & Deploy
          command: |
            mvn -s .circleci/maven.settings.xml -Dgpg.keyname=${GPG_EMAIL} -Dchangelist=${MVN_CHANGELIST} -DenableSigning=true clean deploy scm:tag

      - run:
          name: Maven Site Stage
          command: |
            mvn -s .circleci/maven.settings.xml -Dgpg.keyname=${GPG_EMAIL} -Dchangelist=${MVN_CHANGELIST} -DenableSigning=true site site:stage

      - run:
          name: Maven Site Publish
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
            mvn -s .circleci/maven.settings.xml -Dgpg.keyname=${GPG_EMAIL} -Dchangelist=${MVN_CHANGELIST} -DenableSigning=true scm-publish:publish-scm
            fi

      - save_cache:
          paths:
            - ~/.m2
          key: v2-maven-repo-{{ .Branch }}-{{ checksum "pom.xml" }}

      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/junit/ \;
          when: always

      - store_test_results:
          path: ~/junit

      - store_artifacts:
          path: ~/junit

      - slack/notify:
          event: fail
          template: basic_fail_1

      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

workflows:
  build-workflow:
    jobs:
      - build:
          context: lasmanis-context
          filters:
            branches:
              ignore:
                - gh-pages
